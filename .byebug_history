c
StandardAPI::Graphql.logger
Logger.new(STDOUT).warn('hi')
StandardAPI::Graphql.logger.warn "hi"
exit
Graphql.methods.sort
exit
pp Graphql.methods.sort
Graphql
exit
StandardAPI::Graphql.const_get(:Type)
exit
StandardAPI::Graphql.const_get(:Type)
exit
@_at_path
StandardAPI::Graphql.eager_load!
StandardAPI::Graphql.auto_load!
StandardAPI::Graphql.auto_load
$STDOUT
Rails.autoloaders.logger = STDOUT
Rails.autoloaders.logger
StandardAPI::Graphql.const_get(:Type)
StandardAPI::Graphql.constants
StandardAPI::Graphql
ActiveSupport::Autoload
StandardAPI::Graphql::Types
exit
association_type
association.klass
association.association_foreign_type
association.foreign_type
pp association.methods.sort
association.association_class
association.association_klass
association.association_foreign_key
association.foreign_key
association.foreign_class
association.klass
association
c
exit
association.has_one?
association
association.kine
association.type
association.name
exit
association
exit
model.columns.map &:name
association.foreign_key
association
model
exit
model.left_model.foreign_key
Photo.left_model
model.left_model
model.left_side
model.name.split('_')
model.name
model.name.split('::')
model
association.klass
association.name
association
model.right_reflection
model.left_reflection
association.association_foreign_key
association.a
model.left_model
model.compute_type
model.table_name_resolver.call
model.table_name_resolver
model.left_reflection.foreign_key
model.left_reflection.primary_key
model.left_reflection
model.left_model
model.lhs_model
model.left_reflection.foreign_key
model.left_reflection
model.parent_reflection
model
self
association.name
association.parent_reflection
association.parent_relfection
association.association_primary_key
association.foreign_type
association.through_reflection
pp association.methods.sort
association.methods.sort
association.association_foreign_k
model.columns.map &:name
model.columns
model
association.foreign_key
association.name
column
exit
c
model.columns.find { |x| x.name == association.foreign_key }.null
model.columns.find { |x| x.name == association.foreign_key }
model.columns.find { |x| x.name == [association.foreign_key] }
model.columns[association.foreign_key]
association.foreign_key
association.forgein_key
association
c
n
association_type
n
association
n
c
n
association.collection?
association_type
n
association.polymorphic?
association
n
include
exit
a
a.method
a.klass_join_scope
a.through_reflection?
pp a.methods.sort
a.methods.sort
a.kind
a = associations.first
associations
exit
c
association.klass
c
n
association.klass
n
association.klass
association.polymorphic?
n
association.polymorphic?
association
exit
pp ActiveRecord::Base.descendants.map(&:base_class).uniq
pp ActiveRecord::Base.descendants.map &:base_class.uniq
ActiveRecord::Base.descendants.map(&:base_class).uniq
ActiveRecord::Base.descendants.map &:base_class.uniq
ActiveRecord::Base.descendants.map &:base_class
Pdf.base_class
Pdf.table_name
ActiveRecord::Base.descendants.map &:sti_name
Photo.sti_name
Pdf.sti_name
Pdf.single_table_inhertance
Pdf.ancestors
ActiveRecord::Base.descendants.map &:name
ActiveRecord::Base.descendants
ActiveRecord::Base
exit
type.fields
exit
pp model_type
pp mode_type
model_type.dig('fields').find { |x| x['name'] == associations.first.name.to_s }
model_type.dig('fields').find { |x| x['name'] == association.name.to_s }
model_type.dig('fields').find { |x| x['name'] == association.name }
model_type.dig('fields').find { |x| x['name
model_type['fields']
model_type
associations.first.name
associations.first
exit
c
pp association.collection?
pp association.methods.sort
association.methods.sort
association
association.has_many?
pp association
assocaiation
association.type
association.klass
association = model.reflect_on_association(include)
model.reflect_on_association(include)
model.reflect_on_association
model.reflect_on_associations
include
model
c
column.null
pp column.methods.sort
column.methods.sort
column.null
column.class
c
Rails.application.routes.routes
puts Rails.application.routes.methods.sort
Rails.application.routes.methods.sort
Rails.application.routes.add_route
Rails.application.routes.add
Rails.application.routes.to_s
Rails.application.routes.to_h
Rails.application.routes.to_s
Rails.application.routes
c
name
type
c
field model.model_name.plural, type: type, null: false
type
model
exit
c
model.name
model
c
model.name
model
c
model.model_name.plural
model.model_name
model
c
query
puts self.methods.sort
self.methods.sort
self.methods
self
c
type_class.field
puts type_class.methods.sort
p type_class.methods.sort
type_class.methods.sort
type_class.methods
type_class.class_methods
type_class
exit
StandardAPI::GraphQL::Schema.load
exit
StandardAPI::GraphQL::Schema.load
exit
StandardAPI::GraphQL::Schema.load
exit
StandardAPI::GraphQL::Schema.load
exit
StandardAPI::GraphQL::Schema.load
exit
StandardAPI::GraphQL::Schema.load
exit
StandardAPI::GraphQL::Schema.load
exit
StandardAPI::GraphQL::Schema.load
StandardAPI::GraphQL::Schema
exit
